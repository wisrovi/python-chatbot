version: "3"
services:
  training:
    build: ./services/train_model
    environment:
      - SO=docker
    volumes:
      - ./services/train_model/model:/code/model

      - ./services/train_model/src:/code/src
      - ./services/train_model/templates:/code/templates
      - ./services/train_model/service.py:/code/service.py
    command: python service.py
    ports:
      - "8886:8887"

  backend:
    build: ./services/backend
    volumes:
      - ./services/train_model/model:/model
      - ./services/train_model/model/data_train:/data_train
      - ./services/backend/src:/code
    command: python api.py
    environment:
      - SO=docker
    ports:
      - "8887:8000"
    depends_on:
      - training
      - redis

  # http://localhost:8888/
  frontend:
    build: ./services/frontend
    volumes:
      - ./services/frontend/src:/code
      - ./services/train_model/model:/code/model
      - ./user_data/nuevos_chats:/nuevos_chats
      - ./user_data/tmp:/tmp
      - ./user_data/received_files:/received_files
    environment:
      - SO=docker
      - DEBUG=1
    ports:
      - "1037:8888"
    depends_on:
      - backend
      - training
    command: python app.py

  telegram_connector:
    build: ./services/telegram_connect
    volumes:
      - ./services/telegram_connect/src:/code
      - ./user_data/chats_telegram:/code/chats
    environment:
      - SO=docker
    depends_on:
      - backend
      - frontend
    command: python connection_bot_telegram.py

  redis:
    image: redislabs/redismod
    #ports:
    #  - "16379:6379"
    environment:
      - SO=docker
    volumes:
      - ./user_data/redis/data:/data
    command: --dir /data --loadmodule /usr/lib/redis/modules/redistimeseries.so

  # TODO: create a new service for the handle events (send email, ibr, etc)
  # TODO: create a new service for mongo db and connect it to the backend
  # TODO: create a new service for redis and connect it to the backend
  # TODO: create a new service for security and connect it to the backend
  # TODO: create a new service for authentication and connect it to the backend
  # TODO: create a new service for autohealing 
  # TODO: create a new service for backup and restore using duplicati or duplicity
  # TODO: create a new service for monitoring using prometheus and grafana
  # TODO: create a new service for logging using fluentd and elasticsearch
  # TODO: create a new service for load balancing using nginx
  # TODO: create a new service for reverse proxy using nginx for https
  # TODO: create a new service for build and deploy using jenkins and continuous integration using jenkins
  # TODO: create a new service for email using postfix
  # TODO: create a new service for instant messaging using mattermost
  # TODO: create a new service for live chat using mattermost
  # TODO: create a new service for file sharing using nextcloud
  # TODO: create a new service for live streaming using jitsi
  # TODO: create a new service for notifications using pushbullet
  # TODO: create a new service for user management using keycloak
  # TODO: create a new service for documentation using wiki with markdown or wikipedia
  # TODO: create a new service for stadistics of usage 
  # TODO: create a new service with DIUN for update docker images
  # TODO: create a new service with autoheal for autohealing containers
